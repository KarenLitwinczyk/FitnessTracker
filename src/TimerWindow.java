import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Karen Litwinczyk
 */
public class TimerWindow extends javax.swing.JFrame {
    //makes a new instance of the mainWindow 
    private MainWindow mw;
    //variable keeps track of the current state of the timer.
    String state;
    /**
     * Creates new form TimerWindow
     */
    public TimerWindow() {
        initComponents();
        //makes a new instance of the stopWatch class
        StopWatch sw = new StopWatch();
        //starts the execution over the thread
        sw.start();
        
    }
    //sets the mainwindow to the instance of what the user sends it 
    public void setMainWindow(MainWindow m){
        this.mw = m;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        cancelBtnTimer = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jlHours = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jlMinutes = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jlSeconds = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jlMilliSeconds = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        startBtn.setText("START");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        stopBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        stopBtn.setText("STOP");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        cancelBtnTimer.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        cancelBtnTimer.setText("CANCEL");
        cancelBtnTimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnTimerActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 24)); // NOI18N
        resetBtn.setText("RESET");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        jlHours.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jlHours.setText("00");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel2.setText(":");

        jlMinutes.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jlMinutes.setText("00");

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel4.setText(":");

        jlSeconds.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jlSeconds.setText("00");

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel1.setText(":");

        jlMilliSeconds.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jlMilliSeconds.setText("00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelBtnTimer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(stopBtn)
                        .addGap(43, 43, 43)
                        .addComponent(resetBtn)
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(startBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlHours)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlMinutes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jlSeconds)
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlMilliSeconds)
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlHours, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jlMinutes)
                    .addComponent(jLabel4)
                    .addComponent(jlSeconds)
                    .addComponent(jLabel1)
                    .addComponent(jlMilliSeconds))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn)
                    .addComponent(stopBtn)
                    .addComponent(resetBtn))
                .addGap(55, 55, 55)
                .addComponent(cancelBtnTimer))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnTimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnTimerActionPerformed
        // TODO add your handling code here:
        //hides this window and shows the main window 
        this.setVisible(false);
        mw.setVisible(true);
    }//GEN-LAST:event_cancelBtnTimerActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // TODO add your handling code here: 
        //sets the state of the stopWatch to start
        state = "Start";       
    }//GEN-LAST:event_startBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        // TODO add your handling code here:
        //sets the state of the stopWatch to stop
       state = "Stop";
    }//GEN-LAST:event_stopBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        //sets the state of the stopWatch to reset
        state = "Reset";
    }//GEN-LAST:event_resetBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimerWindow().setVisible(true);
            }
        });
    }
 //Thread class: is a thread of  continuous execution within a program.
 //execution of code needs to be started by the .start() method and can be stopped by the .stop() method.
 class StopWatch extends Thread{
     //variables to keep track of milliseconds, seconds, minutes, and hours.
     int ms = 0;
     int s = 0;
     int m = 0;
     int hr = 0;
     //overrides the Thread class's run method
     //contains the code needed to run after the thread is started. (.start() is called).
     public void run(){
          //basically an infinte for loop, theres no initialization.
         //no condition is checked, automatically is true
         for(;;){
             try{
                 //pauses entire thing for 1 millisecond and then continues
                 sleep(1);
                 ms++;
                 //if the start button is pressed then start the timer, if stop button is pressed stop.
                 if(state == "Start"){
                     if(ms >= 1000){
                         s++;
                         ms = 0;
                     }
                     //if seconds are more than 60 increment minutes and set seconds to 0.
                     if(s >= 60){
                         m++;
                         s = 0;
                         ms = 0;
                     }
                     //if minutes are more than 60 increment hours and set minutes to 0.
                     if(m >= 60){
                         hr++;
                         m = 0;
                         s = 0;
                         ms = 0;
                     }
                     //sets the labels to the current values of the variables.
                     jlMilliSeconds.setText(Integer.toString(ms));
                     jlSeconds.setText(Integer.toString(s));
                     jlMinutes.setText(Integer.toString(m));
                     jlHours.setText(Integer.toString(hr));
                 }
                 //if the reset button is pressed set all the variables to 0
                 if(state == "Reset"){
                     hr = 0;
                     m = 0;
                     s = 0;
                     ms = 0;
                     //sets the labels to 0:0:0:0
                     jlMilliSeconds.setText(Integer.toString(ms));
                     jlSeconds.setText(Integer.toString(s));
                     jlMinutes.setText(Integer.toString(m));
                     jlHours.setText(Integer.toString(hr));
                     
                 }
                 
             }
             catch(Exception ex){
                 JOptionPane.showMessageDialog(null, ex);
             }
                 
         }
     }
 }
 //Sources
 //http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html
 //https://www.youtube.com/playlist?list=PL4unWLKFsZfeZHejh7hZuiKrifKvMbkKB
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtnTimer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jlHours;
    private javax.swing.JLabel jlMilliSeconds;
    private javax.swing.JLabel jlMinutes;
    private javax.swing.JLabel jlSeconds;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables
}
